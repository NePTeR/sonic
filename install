#!/usr/bin/env sh
#
# installer for sonic
#

# outputs an error message and usage instructions
#
# @param string
# @return void
#
usage_and_exit()
{
    echo $1
    echo "./install /path/to/install/to AppName"
    echo "optional arguments"
    echo "--verbose             shows verbose output"
    echo "--core-only           install only the core framework"
    echo "--test-framework      include the unit test framework in this installation"
    echo "--symlink             use a symlink to this library"
    echo "--help                show this menu"
    exit 1
}

# converts string to lowercase
#
# @param string
# @return string
#
to_lower()
{
    echo $1 | tr "[:upper:]" "[:lower:]"
}

# outputs message to command line
#
# @param string what should we output
# @param string $VERBOSE
#
output()
{
    if [ ! $2 ] ; then
        echo $1
        return
    fi

    if [ $VERBOSE = "true" ] ; then
        echo $1
    fi
}

# determines if an option is in the array of arguments
#
# @param string needle
# @param string haystack
# @return bool
#
in_array()
{
    for key in $2 ; do
        if [ "$key" == "$1" ] ; then
            return 0
        fi
    done

    return 1
}

if in_array "--help" "$*" ; then
    usage_and_exit "usage"
fi

# if no path was specified bail
if [ ! $1 ] ; then
    usage_and_exit "missing path"
fi

# if no app name was specified bail
if [ ! $2 ] ; then
    usage_and_exit "missing app name"
fi

# set up global variables
INSTALL_PATH=$1
APP_NAME=$2
LC_APP_NAME=`to_lower $APP_NAME`
VERBOSE=false
ALL_FILES=true
UNIT_TEST_FRAMEWORK=false
SYMLINK=false

if in_array "--verbose" "$*" ; then
    VERBOSE=true
fi

if in_array "--core-only" "$*" ; then
    ALL_FILES=false
fi

if in_array "--test-framework" "$*" ; then
    UNIT_TEST_FRAMEWORK=true
fi

if in_array "--symlink" "$*" ; then
    SYMLINK=true
fi

# if the directory and name already exists then find out if we should overwrite it
if [ -d $INSTALL_PATH ] ; then
    echo "there is already a directory at: $INSTALL_PATH"
    while [ ! $override ]
        do
            echo "are you sure you want to overwrite this directory? (yes or no)"
            read override
        done

    if [ $override = "yes" ] ; then
        output "removing old directory at $INSTALL_PATH"
        rm -r $INSTALL_PATH
    else
        exit 1
    fi
fi

# create all the directories and files we need
output "creating new directory at $INSTALL_PATH"
mkdir $INSTALL_PATH

output "creating config directory" verbose_only
mkdir $INSTALL_PATH/configs

output "creating controllers directory" verbose_only
mkdir $INSTALL_PATH/controllers

output "creating libs directory" verbose_only
mkdir $INSTALL_PATH/libs

output "creating public_html directory" verbose_only
mkdir $INSTALL_PATH/public_html

if [ $ALL_FILES == true ] ; then
    output "creating util directory" verbose_only
    mkdir $INSTALL_PATH/util

    output "creating extensions directory" verbose_only
    mkdir $INSTALL_PATH/extensions
fi

output "creating views directory" verbose_only
mkdir $INSTALL_PATH/views

output "creating layouts directory" verbose_only
mkdir $INSTALL_PATH/views/layouts

output "creating main views directory" verbose_only
mkdir $INSTALL_PATH/views/main

if [ $ALL_FILES == true ] ; then
    output "creating configs/app.ini" verbose_only
    contents="[global]\nurls[www] = \"http://www.$LC_APP_NAME.com\"\nurls[static] = \"http://www.$LC_APP_NAME.com/assets\"\ndebug = 0\n\n[production : global]\n\n[dev : global]\nurls[www] = \"http://www.$LC_APP_NAME.local\"\nurls[static] = \"http://www.$LC_APP_NAME.local/assets\"\ndebug = 1\n\ndb.default_schema = \"database_name\"\ndb.database_name.user = \"username\"\ndb.database_name.password = \"password\"\ndb.database_name[] = \"host=localhost;type=master\"\ndb.database_name[] = \"host=localhost;type=slave;weight=10\"\n\ncache.default[] = \"127.0.0.1:11211\"\ncache.default[] = \"127.0.0.1:11211\""
    printf "%b\n" "$contents" > $INSTALL_PATH/configs/app.ini

    output "creating configs/definitions.php" verbose_only
    contents="<?php\nuse \\Sonic\\Database;\n\n\$definitions = array();"
    printf "%b\n" "$contents" > $INSTALL_PATH/configs/definitions.php
fi

output "creating configs/routes.php" verbose_only
contents="<?php\n\$routes = array(\n    '/welcome' => array('main', 'welcome')\n);"
printf "%b\n" "$contents" > $INSTALL_PATH/configs/routes.php


output "creating controllers/main.php"
contents="<?php\nnamespace Controllers;\nuse \Sonic\App;\n\nclass Main extends \Sonic\Controller\n{\n    public function index()\n    {\n        \$this->disableLayout();\n    }\n\n    public function welcome()\n    {\n    }\n\n    public function error()\n    {\n        // show error for exception at the highest level\n        // if the exception is within a subview we should not show it\n        \$this->view->show_error = \$this->request()->getParam('top_level_exception');\n        \$this->view->is_dev = App::isDev();\n\n        \$this->view->exception = \$this->request()->getParam('exception');\n    }\n}"
printf "%b\n" "$contents" > $INSTALL_PATH/controllers/main.php

if [ $SYMLINK == true ] ; then
    output "creating symlink to libs/Sonic"

    ln -s `pwd`/lib/Sonic $INSTALL_PATH/libs/Sonic
elif [ $ALL_FILES == true ] ; then
    output "copying sonic library to libs/Sonic"
    cp -r lib/Sonic $INSTALL_PATH/libs/Sonic

    if [ $UNIT_TEST_FRAMEWORK == false ] ; then
        rm -r $INSTALL_PATH/libs/Sonic/UnitTest
    fi
else
    output "copying sonic core to libs/Sonic/Core.php"
    mkdir $INSTALL_PATH/libs/Sonic
    cp lib/Sonic/Core.php $INSTALL_PATH/libs/Sonic/Core.php
fi

output "creating public_html/.htaccess"
contents="# it is recommended to set the environment in your vhost instead of .htaccess\nSetEnv ENVIRONMENT development\nRewriteEngine On\nRewriteRule ^.htaccess$ - [F,L]\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule \.*\$ /index.php [NC,L]"
printf "%b\n" "$contents" > $INSTALL_PATH/public_html/.htaccess

output "creating public_html/index.php"
if [ $ALL_FILES == true ] ; then
    contents="<?php\nset_include_path(str_replace('/public_html', '/libs', \$_SERVER['DOCUMENT_ROOT']));\ninclude 'Sonic/Core.php';\nuse \Sonic\App;\n\$app = App::getInstance();\n\n// if you would like to use an app delegate uncomment this line\n// \$app->setDelegate('$APP_NAME\App\Delegate');\n\n\$app->start();"
else
    contents="<?php\nset_include_path(str_replace('/public_html', '/libs', \$_SERVER['DOCUMENT_ROOT']));\ninclude 'Sonic/Core.php';\nuse \Sonic\App;\n\$app = App::getInstance();\n\$app->start();"
fi
printf "%b\n" "$contents" > $INSTALL_PATH/public_html/index.php

if [ $ALL_FILES == true ] ; then
    output "creating libs/$APP_NAME/App/Delegate.php" verbose_only
    mkdir $INSTALL_PATH/libs/$APP_NAME
    mkdir $INSTALL_PATH/libs/$APP_NAME/App
    contents="<?php\nnamespace $APP_NAME\App;\nuse Sonic\App, Sonic\Controller, Sonic\View, Sonic\Layout;\n\n/**\n * for other methods you can implement see Sonic/App/Delegate.php\n */\nclass Delegate extends \Sonic\App\Delegate\n{\n    /**\n     * called when the application first starts loading before any files are included\n     *\n     * all application settings should be set here\n     *\n     * @param string \$mode startup mode of application\n     * @return void\n     */\n    public function appStartedLoading(\$mode)\n    {\n        // \$this->_app->addSetting(App::AUTOLOAD, true);\n    }\n\n    /**\n     * called when all the core files are done being included for the request\n     *\n     * all extra files you need to include for every request should happen here\n     *\n     * @return void\n     */\n    public function appFinishedLoading()\n    {\n        // any files you want to include on every request should go here\n        // \$this->_app->includeFile('$APP_NAME/Controller.php');\n    }\n}"
    printf "%b\n" "$contents" > $INSTALL_PATH/libs/$APP_NAME/App/Delegate.php
fi

output "creating empty favicon file" verbose_only
touch $INSTALL_PATH/public_html/favicon.ico

output "copying turbo.min.js to public_html/assets/js" verbose_only
mkdir $INSTALL_PATH/public_html/assets
mkdir $INSTALL_PATH/public_html/assets/js
cp js/turbo.min.js $INSTALL_PATH/public_html/assets/js/


if [ $ALL_FILES == true ] ; then
    output "copying skeleton_class utility to util/skeleton_class.php" verbose_only
    cp util/skeleton_class.php $INSTALL_PATH/util/

    output "copying sync_db utility to util/sync_db.php" verbose_only
    cp util/sync_db.php $INSTALL_PATH/util/

    output "copying extension utility to util/extension.php" verbose_only
    cp util/extension.php $INSTALL_PATH/util/
fi

output "creating main layout"
contents="<!DOCTYPE html>\n<html>\n<head>\n    <title><?php echo \$this->setTitlePattern('$APP_NAME - \${title}'); ?></title>\n</head>\n<body>\n    <?php echo \$this->topView()->getHtml(); ?>\n</body>\n</html>"
printf "%b\n" "$contents" > $INSTALL_PATH/views/layouts/main.phtml

output "creating index view"
contents="<h1>Hello World</h1>\n<a href=\"/welcome\">click here to checkout the welcome page!</a>"
printf "%b\n" "$contents" > $INSTALL_PATH/views/main/index.phtml

output "creating welcome view"
contents="<?php \$this->title('Welcome!'); ?>\n<h1>Welcome to $APP_NAME</h1>"
printf "%b\n" "$contents" > $INSTALL_PATH/views/main/welcome.phtml

output "creating error view"
contents="<?php if (\$this->show_error): ?>\n    <h1>This is the error view</h1>\n<?php endif; ?>\n\n<?php if (\$this->is_dev && \$this->show_error): ?>\n    <h3>debug information</h3>\n    <p><?php echo \$this->exception->getMessage(); ?></p>\n    <pre><?php echo \$this->exception->getTraceAsString(); ?></pre>\n<?php endif; ?>"
printf "%b\n" "$contents" > $INSTALL_PATH/views/main/error.phtml

cd $INSTALL_PATH
absolute_path=`pwd`

output "creating SETUP"
contents="your application has been successfully installed.\n\nnow all you have to do is add this to your vhosts:\n\n<VirtualHost *:80>\n    # SetEnv ENVIRONMENT development\n    ServerName $LC_APP_NAME.local\n    ServerAlias www.$LC_APP_NAME.local\n    DocumentRoot \"$absolute_path/public_html\"\n    DirectoryIndex index.php\n</VirtualHost>\n\n<Directory \"$absolute_path/public_html\">\n    Options -Indexes FollowSymLinks\n    AllowOverride FileInfo\n    Order allow,deny\n    Allow from all\n</Directory>\n\nthen add this to your /etc/hosts\n\n127.0.0.1 $LC_APP_NAME.local\n127.0.0.1 www.$LC_APP_NAME.local"
printf "%b\n" "$contents" > $INSTALL_PATH/SETUP

output "done"

exit 0
